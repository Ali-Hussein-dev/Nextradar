/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Company = {
  _id: string;
  _type: "company";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  url?: string;
  recruiter?: string;
  recruiterEmail?: string;
  logo?: string;
  isAgency?: boolean;
  branch?: string;
};

export type Integration = {
  _id: string;
  _type: "integration";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  category?: {
    id?: number;
    name?: string;
  };
  logoUrl?: string;
  url?: string;
  exampleUrl?: string;
  tags?: Array<string>;
  sponsored?: boolean;
};

export type Sites = {
  _id: string;
  _type: "sites";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  owner?: string;
  name?: string;
  description?: string;
  homepage?: string;
  category?: string;
  createdBy?: string;
  featured?: boolean;
  tags?: Array<string>;
};

export type Repos = {
  _id: string;
  _type: "repos";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  owner?: string;
  repoName?: string;
  description?: string;
  category?: string;
  tags?: Array<string>;
  homepage?: string;
  avatar?: string;
  recommended?: boolean;
  stars?: number;
};

export type JobPost = {
  _id: string;
  _type: "jobPost";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  jobTitle?: string;
  slug?: Slug;
  timeZone?: Array<string>;
  location?: string;
  branch?: string;
  contractType?: "Full-time" | "Part-time" | "Freelance" | "Contract" | "Internship" | "Other";
  applyUrl?: string;
  workplaceType?: "Remote" | "Onsite" | "Hybrid";
  longDescription?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  isReactjsOnly?: boolean;
  salary?: {
    minimum?: string;
    maximum?: string;
    currency?: "USD" | "EUR" | "GBP";
  };
  company?: {
    name?: string;
    website?: string;
    logo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    isHiringAgency?: boolean;
    recruiterName?: string;
    recruiterEmail?: string;
  };
  orderId?: string;
  publishedAt?: string;
  benefits?: Array<string>;
  jobType?: Array<string>;
  jobHook?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  companyName?: string;
  currency?: string;
  salaryMax?: number;
  salaryMin?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Source = {
  _id: string;
  _type: "source";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  href?: string;
  src?: string;
  description?: string;
  type?: string;
  author?: string;
  recommended?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Company | Integration | Sites | Repos | JobPost | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug | Source;
export declare const internalGroqTypeReferenceTo: unique symbol;
